local vim = vim

local M = {}

local RuntimeDirectory = {}

function RuntimeDirectory.__index(tbl, key)
  local v = rawget(tbl, key)
  if v then
    return v
  end

  local directory = setmetatable({}, RuntimeDirectory)
  rawset(tbl, key, directory)
  return directory
end

function M.new()
  return setmetatable({}, RuntimeDirectory)
end

local with_upvalue_template = [[
-- generated by runtimetable.nvim
local ok, runtimetable = pcall(require, "runtimetable")
if not ok then
  vim.api.nvim_echo({ { "not found runtimetable", "WarningMsg" } }, true, {})
  return
end
runtimetable._call(%q, %s)
]]

local make_file_content = function(content_source, base_path, dir_parts)
  vim.validate({
    content_source = { content_source, { "string", "function" } },
  })

  if type(content_source) == "string" then
    return content_source
  end

  local str = require("runtimetable.lib.function").executable_string(content_source)
  if not str then
    return with_upvalue_template:format(base_path, vim.inspect(dir_parts, { newline = "" }))
  end

  return str
end

function M.save(base_path, target_runtime)
  require("runtimetable.lib.table").walk(target_runtime, function(content_source, dir_parts)
    local path = table.concat({ base_path, unpack(dir_parts) }, "/")
    local content = make_file_content(content_source, base_path, dir_parts)

    local dir_path = vim.fs.dirname(path)
    vim.fn.mkdir(dir_path, "p")

    local f = io.open(path, "w")
    f:write(content)
    f:close()
  end)
end

return M
